/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '1-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.70.2'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'

dependencies {
    testImplementation 'com.google.jimfs:jimfs:1.3.0'
    testImplementation 'org.xmlunit:xmlunit-core:2.10.0'
    testImplementation 'io.github.classgraph:classgraph:4.8.179'
}

gradlePlugin {
    plugins {
        'name.remal.jacoco-to-cobertura' {
            id = 'name.remal.jacoco-to-cobertura'
            implementationClass = 'name.remal.gradle_plugins.jacoco_to_cobertura.JacocoToCoberturaPlugin'
            displayName = 'Convert Jacoco XML reports to Cobertura format'
            description = property('repository-description')
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration jacocoToCoberturaPluginConf = configurations.create('jacocoToCoberturaPlugin') { Configuration conf ->
    conf.dependencies.add(project.dependencies.create('net.razvan:JacocoToCoberturaPlugin:1.2.0'))
    conf.exclude(group: 'org.jetbrains.kotlin')
}

dependencies.components {
    withModule('net.razvan:JacocoToCoberturaPlugin', TargetJvmVersionRule) { params(8) }
}

configurations.testImplementation.dependencies.addAllLater(
    provider {
        jacocoToCoberturaPluginConf.resolvedConfiguration
            .firstLevelModuleDependencies
            .collect { [it, it.children] }
            .flatten()
            .findAll { ResolvedDependency dep ->
                [
                    'net.razvan',
                    'org.simpleframework',
                ].contains(dep.moduleGroup)
            }
            .collect { ResolvedDependency dep -> "${dep.moduleGroup}:${dep.moduleName}:${dep.moduleVersion}" }
            .collect {
                project.dependencies.create(it) {
                    jacocoToCoberturaPluginConf.excludeRules.forEach { exclude(group: it.group, module: it.module) }
                }
            }
    }
)

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

@CacheableRule
abstract class TargetJvmVersionRule implements ComponentMetadataRule {

    final Integer jvmVersion

    @Inject
    TargetJvmVersionRule(Integer jvmVersion) {
        this.jvmVersion = jvmVersion
    }

    void execute(ComponentMetadataContext context) {
        context.details.allVariants {
            attributes {
                attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, jvmVersion)
            }
        }
    }

    @Override
    String toString() {
        return "${getClass().simpleName}[$jvmVersion]"
    }

}
